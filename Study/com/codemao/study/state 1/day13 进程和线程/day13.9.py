#  多进程还是多线程
#
# 无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？
# 我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，
# 每项作业耗时1小时。如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，
# 依次全部做完，一共花5小时，这种方式称为单任务模型。
# 如果你打算切换到多任务模型，可以先做1分钟语文，
# 再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，
# 这种方式就和单核CPU执行多任务是一样的了，以旁观者的角度来看，
# 你就正在同时写5科作业。
#
# 但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），
# 然后，打开数学课本、找出圆规直尺（这叫准备新环境），
# 才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，
# 它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），
# 然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），
# 才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。
# 如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，
# 这种情况最常见的就是硬盘狂响硬盘狂响，点窗口无反应，系统处于假死状态
# 。所以，多任务一旦多到一个限度，反而会使得系统性能急剧下降，
# 最终导致所有任务都做不好。
#
# 是否采用多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和I/O密集型。
# 计算密集型任务的特点是要进行大量的计算，消耗CPU资源，
# 比如对视频进行编码解码或者格式转换等等，这种任务全靠CPU的运算能力，
# 虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，
# CPU执行任务的效率就越低。计算密集型任务由于主要消耗CPU资源，
# 这类任务用Python这样的脚本语言去执行效率通常很低，
# 最能胜任这类任务的是C语言，我们之前提到了Python中有嵌入C/C++代码的机制。

#
# 除了计算密集型任务，其他的涉及到网络、存储介质I/O的任务都可以视为I/O密集型任务，
# 这类任务的特点是CPU消耗很少，
# 任务的大部分时间都在等待I/O操作完成（因为I/O的速度远远低于CPU和内存的速度）。
# 对于I/O密集型任务，如果启动多任务，就可以减少I/O等待时间从而让CPU高效率的运转。
# 有一大类的任务都属于I/O密集型任务，
# 这其中包括了我们很快会涉及到的网络应用和Web应用。

