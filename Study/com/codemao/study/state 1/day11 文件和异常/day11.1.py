# 在实际开发中，常常需要对程序中的数据进行[持久化](https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96)操作，而实现数据持久化最直接简单的方式就是将数据保存到文件中。说到“文件”这个词，可能需要先科普一下关于[文件系统](https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F)的知识，对于这个概念，维基百科上给出了很好的诠释，这里不再浪费笔墨。
#
# 在Python中实现文件的读写操作其实非常简单，
# 通过Python内置的`open`函数，
# 我们可以指定文件名、操作模式、编码信息等来获得操作文件的对象，
# 接下来就可以对文件进行读写操作了。
# 这里所说的操作模式是指要打开什么样的文件
# （字符文件还是二进制文件）以及做什么样的操作（读、写还是追加），
# 具体的如下表所示。
#
# | 操作模式 | 具体含义                         |
# | -------- | -------------------------------- |
# | `'r'`    | 读取 （默认）                    |
# | `'w'`    | 写入（会先截断之前的内容）       |
# | `'x'`    | 写入，如果文件已经存在会产生异常 |
# | `'a'`    | 追加，将内容写入到已有文件的末尾 |
# | `'b'`    | 二进制模式                       |
# | `'t'`    | 文本模式（默认）                 |
# | `'+'`    | 更新（既可以读又可以写）         |

# 读写文本文件

# 读取文本文件时，需要在使用`open`函数时指定好带路径的文件名
# （可以使用相对路径或绝对路径）并将文件模式设置为`'r'`
# （如果不指定，默认值也是`'r'`），然后通过`encoding`参数指定编码
# （如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码），
# 如果不能保证保存文件时使用的编码方式与encoding参数指定的编码方式是一致的，
# 那么就可能因无法解码字符而导致读取失败。下面的例子演示了如何读取一个纯文本文件。

def main():
    
    file = open('text/firstclass.txt', 'r', encoding='GBK')
    print(file.read())
    file.close()


if __name__ == '__main__':
    main()